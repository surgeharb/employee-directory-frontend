{"version":3,"sources":["assets/images/employee2.png","assets/images/employee3.png","assets/images/employee4.png","assets/styles/theme.ts","graphql/queries/employee.query.ts","graphql/mutations/remove-employee.mutation.ts","components/EmployeeRow/styles.ts","components/EmployeeRow/index.tsx","components/EmployeesTableHead/index.tsx","components/EmployeesTableToolbar/styles.ts","components/EmployeesTableToolbar/index.tsx","containers/EmployeesList/employees-list.component.tsx","containers/EmployeesList/employees-list.container.tsx","graphql/mutations/add-employee.mutation.ts","graphql/mutations/edit-employee.mutation.ts","containers/EmployeeIdentity/styles.ts","components/EmployeePreview/styles.ts","data.ts","components/EmployeePreview/index.tsx","containers/EmployeeIdentity/employee-identity.component.tsx","containers/EmployeeIdentity/employee-identity.container.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/images/employee1.png"],"names":["module","exports","theme","createMuiTheme","palette","primary","green","secondary","red","COUNT_ALL_EMPLOYEES","gql","GET_ALL_EMPLOYEES","GET_EMPLOYEE","REMOVE_EMPLOYEE","useStyles","makeStyles","createStyles","editBtn","padding","spacing","EmployeeRow","employee","fields","isSelected","onSelect","classes","TableRow","TableCell","Checkbox","checked","onClick","map","employeeId","id","key","_id","align","to","Tooltip","title","IconButton","className","fontSize","EmployeesTableHead","numSelected","rowCount","headCells","onSelectAllClick","TableHead","indeterminate","onChange","headCell","label","toolbar","flex","justifyContent","btnMargin","marginRight","EmployeesTableToolbar","onDelete","searchEnabled","Toolbar","Typography","color","variant","Button","undefined","EmployeesListComponent","data","count","loading","page","pageSize","handleChangePage","handleChangePageSize","useMutation","removeEmployee","useState","selectedEmployees","setSelectedEmployees","CircularProgress","Paper","length","forEach","variables","TableContainer","Table","TableBody","currentlySelected","selectedIndex","indexOf","splice","push","onEmployeeRowSelected","includes","TablePagination","component","rowsPerPage","onChangePage","onChangeRowsPerPage","rowsPerPageOptions","EmployeesListContainer","setPage","setPageSize","countData","useQuery","pollInterval","employeeFields","employees","event","target","value","e","newPage","ADD_EMPLOYEE","EDIT_EMPLOYEE","root","display","flexWrap","previewPaper","height","selectInputLabel","paddingRight","paddingLeft","backgroundColor","selector","textField","margin","avatar","width","btns","textAlign","btnContainer","btn","minWidth","infoGrid","paddingTop","subGrid","maxWidth","lineHeight","avatarContainer","IMAGES","src","Employee2","alt","Employee3","Employee4","Employee1","employeesListFields","type","employeeIdentityFields","EmployeePreview","getIdValue","pp","profilePicture","imgAlt","imgSrc","Grid","container","item","md","Avatar","filter","xs","Chip","clickable","EmployeeIdentityComponent","onDataChange","onSubmit","history","useHistory","alertIsShown","setAlertIsShown","selectedInputId","setSelectedInputId","onValueChange","inputType","regex","replace","substr","sm","noValidate","autoComplete","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","img","i","TextField","required","InputLabelProps","shrink","onBlur","onFocus","Container","setTimeout","goBack","Snackbar","open","Alert","severity","EmployeeIdentityContainer","useParams","addEmployee","editEmployee","employeeData","setEmployeeData","queryData","useEffect","currentEmployee","params","apolloClient","ApolloClient","uri","App","isIdentityPage","useLocation","pathname","ThemeProvider","client","Breadcrumbs","activeClassName","Divider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee16675a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/employee2.628417fa.png\";","module.exports = __webpack_public_path__ + \"static/media/employee3.2918610d.png\";","module.exports = __webpack_public_path__ + \"static/media/employee4.ecf0fd3a.png\";","import { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: green,\n    secondary: red,\n  },\n});","import gql from 'graphql-tag';\n\nexport const COUNT_ALL_EMPLOYEES = gql`\n  query CountEmployees {\n    count: countEmployees\n  }\n`;\n\nexport const GET_ALL_EMPLOYEES = gql`\n  query GetEmployees($page: Int!, $pageSize: Int!) {\n    employees: getEmployees(page: $page, pageSize: $pageSize) {\n      _id\n      phoneNumber\n      firstName\n      lastName\n      position\n      department\n      nationality\n      profilePicture\n    }\n  }\n`;\n\nexport const GET_EMPLOYEE = gql`\n  query Employee($id: String!) {\n    employee: getEmployee(id: $id) {\n      _id\n      phoneNumber\n      firstName\n      lastName\n      position\n      department\n      nationality\n      profilePicture\n    }\n  }\n`;","import gql from 'graphql-tag';\n\nexport const REMOVE_EMPLOYEE = gql`\n  mutation RemoveEmployee($id: String!) {\n    removeEmployee(id: $id) {\n      _id\n    }\n  }\n`;","import {\n  createStyles, makeStyles, Theme,\n} from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    editBtn: {\n      padding: theme.spacing(.4)\n    }\n  }),\n);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// Styles\nimport { useStyles } from './styles';\n\n// UI Components\nimport {\n  TableRow, TableCell, Checkbox, IconButton, Tooltip,\n} from '@material-ui/core';\n\n// Models\nimport { IEmployee, EmployeePropertyDto } from '../../models/employee';\n\n// Material Icons\nimport EditIcon from '@material-ui/icons/Edit';\n\ntype Props = {\n  isSelected: boolean;\n  employee: IEmployee;\n  fields: EmployeePropertyDto[];\n\n  onSelect: () => void;\n};\n\nexport function EmployeeRow({ employee, fields, isSelected, onSelect }: Props) {\n  const classes = useStyles();\n\n  function renderEditEmployee(employeeId: string) {\n    return (\n      <NavLink to={`/employees/${employeeId}/identity`}>\n        <Tooltip key={`${employee._id}_edit`} title=\"Edit\">\n          <IconButton className={classes.editBtn}>\n            <EditIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </NavLink>\n    );\n  }\n\n  return (\n    <TableRow>\n      <TableCell padding=\"checkbox\">\n        <Checkbox checked={isSelected} onClick={onSelect} />\n      </TableCell>\n\n      {fields.map(({ id }) => (\n        <TableCell key={`${employee._id}_${id || 'edit'}`} align={id ? \"left\" : \"center\"}>\n          {/** Add Edit Employee Action if field is empty (end of row) */}\n          {id ? employee[id] : renderEditEmployee(employee._id)}\n        </TableCell>\n      ))}\n    </TableRow>\n  );\n};","import React from 'react';\n\n// UI Components\nimport {\n  TableHead, TableRow, TableCell, Checkbox\n} from \"@material-ui/core\";\nimport { EmployeePropertyDto } from '../../models/employee';\n\ntype Props = {\n  onSelectAllClick: () => void;\n  headCells: EmployeePropertyDto[];\n  numSelected: number;\n  rowCount: number;\n};\n\nexport function EmployeesTableHead({ numSelected, rowCount, headCells, onSelectAllClick }: Props) {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n          />\n        </TableCell>\n\n        {headCells.map(headCell => (\n          <TableCell key={headCell.id}>{headCell.label}</TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}","import {\n  createStyles, makeStyles, Theme,\n} from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: {\n      flex: 1,\n      justifyContent: 'space-between'\n    },\n    btnMargin: {\n      marginRight: theme.spacing(2),\n    }\n  }),\n);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// Styles\nimport { useStyles } from './styles';\n\n// UI Components\nimport {\n  Toolbar, Typography, Tooltip, IconButton, Button,\n} from '@material-ui/core';\n\n// Material Icons\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchListIcon from '@material-ui/icons/Search';\n\ntype Props = {\n  numSelected: number;\n  searchEnabled?: boolean;\n\n  onDelete: () => void;\n}\n\nexport function EmployeesTableToolbar({ numSelected, onDelete, searchEnabled }: Props) {\n  const classes = useStyles();\n\n  function renderInitialTooltip() {\n    return (\n      <>\n        <Typography variant=\"h6\" id=\"tableTitle\">\n          Employees List\n        </Typography>\n        <div>\n          <NavLink to=\"/employees/identity\">\n            <Button variant=\"outlined\" color=\"primary\" className={searchEnabled ? classes.btnMargin : undefined}>\n              + Add Employee\n            </Button>\n          </NavLink>\n          {\n            searchEnabled && (\n              <Tooltip title=\"Search\">\n                <IconButton>\n                  <SearchListIcon />\n                </IconButton>\n              </Tooltip>\n            )\n          }\n        </div>\n      </>\n    );\n  }\n\n  function renderSelectedTooltip() {\n    return (\n      <>\n        <Typography color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n        <Tooltip title=\"Delete\" onClick={onDelete}>\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      </>\n    );\n  }\n\n  return (\n    <Toolbar className={classes.toolbar}>\n      {(numSelected > 0) ? renderSelectedTooltip() : renderInitialTooltip()}\n    </Toolbar>\n  );\n}","import React, { useState } from 'react';\n\n// GraphQL\nimport { useMutation } from '@apollo/react-hooks';\nimport { REMOVE_EMPLOYEE } from '../../graphql/mutations/remove-employee.mutation';\n\n// UI Components\nimport {\n  Table, TableBody, Paper, TableContainer,\n  TablePagination, CircularProgress,\n} from '@material-ui/core';\n\n// Custom Components\nimport { EmployeeRow } from '../../components/EmployeeRow';\nimport { EmployeesTableHead } from '../../components/EmployeesTableHead';\nimport { EmployeesTableToolbar } from '../../components/EmployeesTableToolbar';\n\n// Models\nimport { IEmployee, EmployeePropertyDto } from '../../models/employee';\n\ntype Props = {\n  data: IEmployee[],\n  fields: EmployeePropertyDto[],\n  loading: boolean,\n  pageSize: number,\n  count: number,\n  page: number,\n\n  handleChangePage: (e: any, newPage: number) => void,\n  handleChangePageSize: (e: any) => void,\n};\n\nfunction EmployeesListComponent({ data, count, fields, loading, page, pageSize, handleChangePage, handleChangePageSize }: Props) {\n  const [removeEmployee] = useMutation(REMOVE_EMPLOYEE);\n\n  // Employees Table Rows - selected rows array\n  const [selectedEmployees, setSelectedEmployees] = useState<string[]>([]);\n\n  function removeSelectedEmployees() {\n    selectedEmployees.forEach(employeeId =>\n      removeEmployee({ variables: { id: employeeId } })\n    );\n\n    setSelectedEmployees([]);\n  }\n\n  // Remove employeeId if already selected, otherwise add \"employeeId\"\n  function onEmployeeRowSelected(employeeId: string) {\n    // Copy to alter selectedEmployees original array\n    const currentlySelected = [...selectedEmployees];\n\n    const selectedIndex = currentlySelected.indexOf(employeeId);\n    const alreadySelected = selectedIndex >= 0;\n    \n    if (alreadySelected) {\n      // Uncheck and remove selected employee\n      currentlySelected.splice(selectedIndex, 1);\n      setSelectedEmployees(currentlySelected);\n    } else {\n      // Check and add selected employee\n      currentlySelected.push(employeeId);\n      setSelectedEmployees(currentlySelected);\n    }\n  }\n\n  function onSelectAllClick() {\n    if (!selectedEmployees.length) {\n      // Check all employees if none is selected\n      setSelectedEmployees([...data.map(employee => employee._id)]);\n    } else {\n      // Uncheck all employees otherwise\n      setSelectedEmployees([]);\n    }\n  }\n\n  function renderTableBody() {\n    return (\n      <TableBody>\n        {data.map(employee => (\n          <EmployeeRow\n            fields={fields}\n            key={employee._id}\n            employee={employee}\n            onSelect={() => onEmployeeRowSelected(employee._id)}\n            isSelected={selectedEmployees.includes(employee._id)}\n          />\n        ))}\n      </TableBody>\n    );\n  }\n\n  function renderTablePagination() {\n    return (\n      <TablePagination\n        component=\"div\"\n        count={count}\n        rowsPerPage={pageSize}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangePageSize}\n        rowsPerPageOptions={[10, 25, 50]}\n        page={page}\n      />\n    );\n  }\n\n  if (loading) {\n    return (<CircularProgress />);\n  }\n\n  return (\n    <Paper>\n      <EmployeesTableToolbar\n        numSelected={selectedEmployees.length}\n        onDelete={removeSelectedEmployees}\n      />\n      <TableContainer>\n        <Table>\n          {/** Table Head */}\n          <EmployeesTableHead\n            headCells={fields}\n            rowCount={data.length}\n            onSelectAllClick={onSelectAllClick}\n            numSelected={selectedEmployees.length}\n          />\n\n          {/** Table Body */}\n          {renderTableBody()}\n        </Table>\n      </TableContainer>\n\n      {/** Table Pagination */}\n      {renderTablePagination()}\n    </Paper>\n  );\n}\n\nexport default EmployeesListComponent;","import React, { useState } from 'react';\n\n// GraphQL\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ALL_EMPLOYEES, COUNT_ALL_EMPLOYEES } from '../../graphql/queries/employee.query';\n\n// Custom Components\nimport EmployeesListComponent from './employees-list.component';\n\n// Models\nimport { EmployeePropertyDto } from '../../models/employee';\n\ntype Props = {\n  fields: EmployeePropertyDto[],\n};\n\nfunction EmployeesListContainer({ fields }: Props) {\n  // Pagination - current page\n  const [page, setPage] = useState(0);\n\n  // Pagination - current rows per page\n  const [pageSize, setPageSize] = useState(10);\n\n  // Pagination - employees database total count\n  const { data: countData } = useQuery(COUNT_ALL_EMPLOYEES, { pollInterval: 500 });\n\n  const { loading, data } = useQuery(GET_ALL_EMPLOYEES, {\n    variables: { page, pageSize },\n    pollInterval: 500\n  });\n\n  const employeeFields: EmployeePropertyDto[] = [...fields, { id: '', label: '' }];\n\n  const employees = data?.employees ?? [];\n\n  function handleChangePage(e: any, newPage: number) {\n    setPage(newPage);\n  }\n\n  function handleChangePageSize(event: any) {\n    setPageSize(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <EmployeesListComponent\n      count={countData?.count ?? 0}\n      handleChangePageSize={handleChangePageSize}\n      handleChangePage={handleChangePage}\n      fields={employeeFields}\n      pageSize={pageSize}\n      loading={loading}\n      data={employees}\n      page={page}\n    />\n  );\n}\n\nexport default EmployeesListContainer;","import gql from 'graphql-tag';\n\nexport const ADD_EMPLOYEE = gql`\n  mutation AddEmployee(\n    $phoneNumber: Int!\n    $firstName: String!\n    $lastName: String!\n    $position: String!\n    $department: String!\n    $nationality: String!\n    $profilePicture: Float!\n  ) {\n    addEmployee(\n      phoneNumber: $phoneNumber\n      firstName: $firstName\n      lastName: $lastName\n      position: $position\n      department: $department\n      nationality: $nationality\n      profilePicture: $profilePicture\n    ) {\n      phoneNumber\n      firstName\n      lastName\n      position\n      department\n      nationality\n      profilePicture\n    }\n  }\n`;","import gql from 'graphql-tag';\n\nexport const EDIT_EMPLOYEE = gql`\n  mutation EditEmployee(\n    $_id: String!\n    $phoneNumber: Int!\n    $firstName: String!\n    $lastName: String!\n    $position: String!\n    $department: String!\n    $nationality: String!\n    $profilePicture: Float!\n  ) {\n    editEmployee(\n      _id: $_id\n      phoneNumber: $phoneNumber\n      firstName: $firstName\n      lastName: $lastName\n      position: $position\n      department: $department\n      nationality: $nationality\n      profilePicture: $profilePicture\n    ) {\n      _id\n      phoneNumber\n      firstName\n      lastName\n      position\n      department\n      nationality\n      profilePicture\n    }\n  }\n`;","import {\n  createStyles, makeStyles, Theme,\n} from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      padding: theme.spacing(2),\n    },\n    previewPaper: {\n      height: '100%',\n    },\n    selectInputLabel: {\n      paddingRight: theme.spacing(1),\n      paddingLeft: theme.spacing(1),\n      backgroundColor: '#fff',\n    },\n    selector: {\n      display: 'inline-flex',\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n    },\n    textField: {\n      margin: '8px!important',\n    },\n    avatar: {\n      display: 'inline-flex!important',\n      width: '20px!important',\n      height: '20px!important',\n    },\n    btns: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n    },\n    btnContainer: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'space-around'\n    },\n    btn: {\n      minWidth: '150px',\n    }\n  }),\n);","import {\n  createStyles, makeStyles, Theme,\n} from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      textAlign: 'center'\n    },\n    infoGrid: {\n      padding: theme.spacing(4),\n      paddingTop: 0,\n    },\n    subGrid: {\n      maxWidth: '250px',\n      textAlign: 'left',\n      margin: '8px auto',\n\n      '& > div': {\n        lineHeight: 2,\n      }\n    },\n    avatarContainer: {\n      padding: theme.spacing(4),\n    },\n    avatar: {\n      display: 'inline-flex',\n      width: theme.spacing(15),\n      height: theme.spacing(15),\n    }\n  }),\n);","// Models\nimport { EmployeePropertyDto } from \"./models/employee\";\n\n// Images\nimport Employee1 from './assets/images/employee1.png';\nimport Employee2 from './assets/images/employee2.png';\nimport Employee3 from './assets/images/employee3.png';\nimport Employee4 from './assets/images/employee4.png';\n\nexport const IMAGES = [\n  { src: Employee2, alt: 'Red Suit Employee' },\n  { src: Employee3, alt: 'Blue Suit Employee' },\n  { src: Employee4, alt: 'Grey Suit Employee' },\n  { src: Employee1, alt: 'Brown Suit Employee' },\n];\n\nexport const employeesListFields: EmployeePropertyDto[] = [\n  { id: 'phoneNumber', label: 'Phone Number', type: 'number' },\n  { id: 'firstName', label: 'First Name' },\n  { id: 'lastName', label: 'Last Name' },\n  { id: 'department', label: 'Department' },\n  { id: 'position', label: 'Position' },\n  { id: 'nationality', label: 'Nationality' },\n];\n\nexport const employeeIdentityFields: EmployeePropertyDto[] = [\n  { id: 'profilePicture', label: 'Profile Picture', type: 'img-picker' },\n  ...employeesListFields,\n];","import React from 'react';\n\n// Styles\nimport { useStyles } from './styles';\n\n// UI Components\nimport {\n  Avatar, Grid, Chip\n} from '@material-ui/core';\n\n// Models\nimport { IEmployee, EmployeePropertyDto, EmployeeProperty } from '../../models/employee';\n\n// Data\nimport { IMAGES } from '../../data';\n\ntype Props = {\n  data?: IEmployee;\n  fields: EmployeePropertyDto[];\n\n  getIdValue?: (id: EmployeeProperty) => string;\n};\n\nexport function EmployeePreview({ data, fields, getIdValue }: Props) {\n  const classes = useStyles();\n\n  const pp = data?.profilePicture ?? 0;\n  const imgAlt = (pp > 0) ? IMAGES[pp - 1].alt : 'img';\n  const imgSrc = (pp > 0) ? IMAGES[pp - 1].src : undefined;\n\n  function filterTextFields({ id }: EmployeePropertyDto) {\n    const removed: EmployeeProperty[] = ['profilePicture'];\n    return !removed.includes(id);\n  }\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item md={12} className={classes.avatarContainer}>\n        <Avatar alt={imgAlt} src={imgSrc} className={classes.avatar} />\n      </Grid>\n\n      <Grid item md={12} className={classes.infoGrid}>\n        {\n          fields.filter(filterTextFields).map(({ id, label }) => (\n            <Grid container key={id} className={classes.subGrid}>\n              <Grid item xs={6}>\n                <span>{label}</span>\n                <span>:&nbsp;</span>\n              </Grid>\n              <Grid item xs={6}>\n                <Chip clickable label={getIdValue ? getIdValue(id) || 'none' : id} />\n              </Grid>\n            </Grid>\n          ))\n        }\n      </Grid>\n    </Grid>\n  )\n}","import React, { useState } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\n\n// Styles\nimport { useStyles } from './styles';\n\n// UI Components\nimport {\n  Grid, Paper, TextField, InputLabel, Select, Container,\n  FormControl, MenuItem, Avatar, Typography, Button, Snackbar,\n} from '@material-ui/core';\n\nimport { Alert } from '@material-ui/lab';\n\n// Custom Components\nimport { EmployeePreview } from '../../components/EmployeePreview';\n\n// Models\nimport { IEmployee, EmployeeProperty, EmployeePropertyDto } from \"../../models/employee\";\n\n// Data\nimport { IMAGES } from '../../data';\n\ntype Props = {\n  data?: IEmployee,\n  fields: EmployeePropertyDto[],\n\n  onSubmit: () => void,\n  onDataChange: (key: EmployeeProperty, value: any) => void,\n};\n\nexport function EmployeeIdentityComponent({ data, fields, onDataChange, onSubmit }: Props) {\n  const classes = useStyles();\n  const history = useHistory();\n\n  // Error Alert on submission\n  const [alertIsShown, setAlertIsShown] = useState(false);\n\n  // Keep track of currently selected input\n  const [selectedInputId, setSelectedInputId] = useState<string>();\n\n  // Parse value from object property key\n  function getIdValue(id: EmployeeProperty) {\n    return `${((data && !!id) ? data[id] : '') || ''}`;\n  }\n\n  // TextFields Validation\n  function isEveryInputValid() {\n    return !fields.map(({ id }) => !!getIdValue(id)).includes(false);\n  }\n\n  function onSaveClicked() {\n    if (isEveryInputValid()) {\n      history.goBack();\n      onSubmit();\n    } else {\n      setAlertIsShown(true);\n\n      setTimeout(() => {\n        setAlertIsShown(false);\n      }, 2000);\n    }\n  }\n\n  function onValueChange(event: any, id: EmployeeProperty, inputType = '') {\n    const regex = (inputType === 'number') ? /[^0-9]/g : '';\n    let value: any = `${event.target.value}`.replace(regex, '');\n\n    // Accept only 30 characters on each form\n    value = value.substr(0, 30);\n\n    if (['number', 'img-picker'].includes(inputType)) {\n      value = +value;\n    }\n    \n    onDataChange(id, value);\n  }\n\n  function renderFormTextFields() {\n    return fields.map(({ id, label, type }) => {\n      const value = getIdValue(id);\n      const isSelected = (selectedInputId === id);\n\n      if (type === 'img-picker') {\n        return (\n          <FormControl key={`${id}-input`} variant=\"outlined\" fullWidth className={classes.textField}>\n            <InputLabel id={`${id}-label`} className={classes.selectInputLabel}>{label}</InputLabel>\n            <Select\n              id={id}\n              value={value}\n              labelId={`${id}-label`}\n              onChange={e => onValueChange(e, id, type)}\n            >\n              <MenuItem value={0}>\n                <em>None</em>\n              </MenuItem>\n              {\n                IMAGES.map((img, i) => (\n                  <MenuItem key={i} value={i+1}>\n                    <Avatar alt={img.alt} src={img.src} className={classes.avatar}></Avatar>\n                    <Typography className={classes.selector}>{img.alt}</Typography>\n                  </MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        );\n      }\n\n      return (\n        <TextField\n          id={id}\n          key={id}\n          required\n          fullWidth\n          label={label}\n          value={value}\n          variant=\"outlined\"\n          className={classes.textField}\n          onChange={e => onValueChange(e, id, type)}\n          InputLabelProps={{ shrink: !!value || isSelected }}\n          onBlur={() => isSelected && setSelectedInputId('')}\n          onFocus={() => setSelectedInputId(id)}\n        />\n      )\n    });\n  }\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={12} md={6}>\n          <Paper>\n            <form noValidate autoComplete=\"off\" className={classes.root}>\n              {renderFormTextFields()}\n            </form>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={12} md={6}>\n          <Paper className={classes.previewPaper}>\n            <EmployeePreview data={data} fields={fields} getIdValue={getIdValue} />\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.btns}>\n            <Container maxWidth=\"xs\" className={classes.btnContainer}>\n              <NavLink to=\"/employees\">\n                <Button variant=\"contained\" color=\"secondary\" className={classes.btn}>Discard</Button>\n              </NavLink>\n              <Button variant=\"contained\" color=\"primary\" className={classes.btn} onClick={onSaveClicked}>\n                Save Employee\n            </Button>\n            </Container>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Snackbar open={alertIsShown}>\n        <Alert severity=\"error\">\n          All the fields are required!\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// GraphQL\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { GET_EMPLOYEE } from '../../graphql/queries/employee.query';\nimport { ADD_EMPLOYEE } from '../../graphql/mutations/add-employee.mutation';\nimport { EDIT_EMPLOYEE } from '../../graphql/mutations/edit-employee.mutation';\n\n// Custom Components\nimport { EmployeeIdentityComponent } from './employee-identity.component';\n\n// Models\nimport { IEmployee, EmployeeProperty, EmployeePropertyDto } from '../../models/employee';\n\ntype Props = {\n  fields: EmployeePropertyDto[],\n};\n\nfunction EmployeeIdentityContainer({ fields }: Props) {\n  const { id = '' } = useParams();\n\n  // Mutations - Add/Edit Employee\n  const [addEmployee] = useMutation(ADD_EMPLOYEE);\n  const [editEmployee] = useMutation(EDIT_EMPLOYEE);\n\n  // Local Employee Data\n  const [employeeData, setEmployeeData] = useState<IEmployee>();\n\n  // Query - Get Employee\n  const { data: queryData } = useQuery(GET_EMPLOYEE, { variables: { id } });\n\n  useEffect(() => {\n    if (queryData?.employee) {\n      // Update employee data from\n      // GraphQL Server if id in path\n      setEmployeeData(queryData.employee)\n    }\n  }, [queryData]);\n\n  function onDataChange(key: EmployeeProperty, value: any) {\n    const currentEmployee: IEmployee = employeeData || { _id: '' };\n    setEmployeeData({ ...currentEmployee, [key]: value });\n  }\n\n  function onSaveEmployee() {\n    const params = { variables: employeeData };\n    id ? editEmployee(params) : addEmployee(params);\n  }\n\n  return (\n    <EmployeeIdentityComponent data={employeeData} fields={fields} onDataChange={onDataChange} onSubmit={onSaveEmployee} />\n  );\n}\n\nexport default EmployeeIdentityContainer;","import React from 'react';\n\n// Apollo\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport './assets/styles/App.scss';\n\n// Styles\nimport { theme } from './assets/styles/theme';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n// UI Components\nimport { Typography, Container, Divider, Breadcrumbs } from '@material-ui/core';\n\n// Containers\nimport { EmployeesListContainer } from './containers/EmployeesList';\nimport { EmployeeIdentityContainer } from './containers/EmployeeIdentity';\n\n// Routing\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\n\n// Data\nimport { employeesListFields, employeeIdentityFields } from './data';\n\nconst apolloClient = new ApolloClient({\n  uri: 'https://api.directory.sergeharb.com/graphql',\n});\n\nfunction App() {\n  const location = useLocation();\n  const isIdentityPage = location.pathname.includes('identity');\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ApolloProvider client={apolloClient}>\n        <Container maxWidth=\"xl\" className=\"Root-Container\">\n        <Typography variant=\"h4\" className=\"Root-Title\">\n          Employee Directory\n        </Typography>\n\n        <Breadcrumbs>\n          <NavLink to=\"/employees\" activeClassName='Link-Active'>\n            <Typography color=\"textPrimary\">Employees List</Typography>\n          </NavLink>\n          {\n            isIdentityPage && (\n              <Typography color=\"textPrimary\">Identity</Typography>\n            )\n          }\n        </Breadcrumbs>\n\n        <div className=\"Header-divider\">\n          <Divider />\n        </div>\n\n        <Switch>\n          <Route exact path=\"/employees\">\n            <EmployeesListContainer fields={employeesListFields} />\n          </Route>\n          <Route exact path=\"/employees/identity\">\n            <EmployeeIdentityContainer fields={employeeIdentityFields} />\n          </Route>\n          <Route exact path=\"/employees/:id/identity\">\n            <EmployeeIdentityContainer fields={employeeIdentityFields} />\n          </Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/employees\" />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/employees\" />\n          </Route>\n        </Switch>\n        </Container>\n      </ApolloProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default function () {\n  return (\n    <Router>\n      <App />\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global Styles\nimport './assets/styles/globals.scss';\n\n// App Component\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/employee1.61af74d7.png\";"],"sourceRoot":""}